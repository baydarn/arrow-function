(param1, param2, …, paramN) => { statements }
(param1, param2, …, paramN) => expression
// buna eşittir: (param1, param2, …, paramN) => { return expression; }

// Eğer tek parametre var ise parantezsiz kullanılabilir:
(singleParam) => { statements }
singleParam => { statements }
singleParam => expression


// Parametre beklenmeyen durumlarda parantez çifti kullanılmalıdır
() => { statements }

İleri Düzey Söz DizimiSection
// Parantez çifti kullanılarak obje tipi veri dönüşü yapılır.
params => ({foo: bar})

// Rest parameters ve default parameters desteklenmektedir
(param1, param2, ...rest) => { statements }
(param1 = defaultValue1, param2, …, paramN = defaultValueN) => { statements }

// Destructuring within the parameter list is also supported
let f = ([a, b] = [1, 2], {x: c} = {x: a + b}) => a + b + c;
f();  
// 6

Arrow functions do not have their own arguments object. Thus, in this example, arguments is simply a reference to the the arguments of the enclosing scope:
var arguments = [1, 2, 3];
var arr = () => arguments[0];

arr(); // 1

function foo(n) {
  var f = () => arguments[0] + n; // foo's implicit arguments binding. arguments[0] is n
  return f(10);
}

foo(1); // 2
In most cases, using rest parameters is a good alternative to using an arguments object.
function foo(n) { 
  var f = (...args) => args[0] + n; 
  return f(10); 
}

foo(1); // 11

//////////// "Invoked through call or apply" ////////////////////////////////////////
var adder = {
 base: 1,
 add: function(a) {
   var f = v => v + this.base;
   return f(a);
 },
 addThruCall: function(a) {
   var f = v => v + this.base;
   var b = {
     base: 2
   };
   return f.call(b, a);
 }
};
console.log(adder.add(1));         // This would log to 2
console.log(adder.addThruCall(1)); // This would log to 2 still
///////////////IMPORTANT///////////////////
/****burda add'de ve addThruCall'da f diye bi arrow function var
bu function'ın this'i ikisinde de dışardaki base: 1'i görüyor
sen arrow function'a başka bir this vermeye çalışsan da (call ile bunu yapmaya çalışıyor) this değişmiyor
hala this. base 1'e eşit
base: 2 ' yi kullanmıyor. *////////////////

/////////////////////////ARROW FUNCTION USED AS METHOD///////////////

var obj = {
  i: 10,
  b: () => console.log(this.i, this),
  c: function() {
    console.log(this.i, this);
  }
}
obj.b(); // prints undefined, Window {...} (or the global object)
obj.c(); // prints 10, Object {...}

NOT:
/**b yi çağırdığı yer neresi? buna bakman lazım
burda b'yi çağırdığı yer bütün fonksiyonların dışı olduğu için this değeri global obje
global objenin de "i" diye bi property'si olmadğı için undefined basar (edited) 
c'ye gelince c normal bir fonksiyon olduğu için this'i kendisine sahip olan obje, dolayısıyla this.i de 10   ***/

//////////////////////////////////Arrow functions used as methods-Another example involving Object.defineProperty()://////////////////

'use strict';
var obj = {
 a: 10
};
Object.defineProperty(obj, 'b', {
 get: () => {
   console.log(this.a, typeof this.a, this);
   return this.a + 10; // represents global object 'Window', therefore 'this.a' returns 'undefined'
 }
});

NOT:burda get arrow function olduğu için çağrıldığı yerdeki this'i kullanacak, objenin this'ini değil
bu yüzden class method'ları tanımlarken arrow function kullanmamamız gerekiyor
arrow function'da this kullanımının anlamı var tabii ki, bazı örneklerde kolaylık sağlıyor. arrow function'ların 1-2 use case'i var


----------->ARROW FUNCTION CONSTRUCTORS OLARAK KULLANILAMAZ.
var Foo = () => {};
var foo = new Foo(); // TypeError: Foo is not a constructor

----------->ARROW FUNCTION'IN PROPERTY ÖZELLİĞİ YOK.
var Foo = () => {};
console.log(Foo.prototype); // undefined

Function Body:
var func = x => x * x;  ////daha kısa body syntax,return'e ihtiyaç yok.
var func = (x, y) => { return x + y; };     //// blok body ile return'e ihtiyaç var.

NOT:ARROW FUNCTION'LARDA CALL,APPLY,BIND ÇALIŞMIYOR.THIS'İ DEĞİŞTİREMİYORSUN.

/////////////////////////API CALLS////////////////////

myObject = {
  myMethod: function () {
    helperObject.doSomethingAsync('superCool', () => {
      console.log(this); // this === myObject
    });
  },
};

//////////////////API CALLS/////////////


const reusabledCallback = function () {
  console.log(this);
};

myObject = {
  myMethod: function () {
    helperObject.doSomethingAsync('superCool', reusabledCallback.bind(myObject));
  },
};

NOT:reusableCallback diye bir function oluşturup bunu başka bir programda kullanabilmek istiyor
bunun içinde this'inin çalışmasını sağlamaya çalışıyor
ayırdıktan sonra this'i çalışmazsa anlamı olmayacak.This burada çalışıyor çünkü en sonunda mecburen normal function'a çeviriyor.asenkron kodla birlikte çalışabilmesi için böyle yapıyoruz.

class/object methods veya constructors ile çalışırken arrow function iyi bir çözüm değil.
closures veya callbacks ile çalışırken arrow function iyi bir çözüm.

